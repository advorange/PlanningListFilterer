@using System.Linq.Expressions;

<MudGrid Class="filter-selection-grid">
	<MudItem xs="12">
		<MudStack Class="filter-selection-stack" Spacing="0">
			<Virtualize Items="@Options">
				<MudCheckBox T="bool" Label="@context" Size="@Size.Small"
							 Checked="@(SelectedItems.Contains(context))"
							 CheckedChanged="@(x => OnCheckedChanged(x, context))" />
			</Virtualize>
		</MudStack>
	</MudItem>
	<MudItem xs="12" Class="d-flex justify-end">
		<MudButton Class="clear-filter-button" OnClick="@Clear">Clear</MudButton>
	</MudItem>
</MudGrid>

@code {
	private Func<AnilistModel, IReadOnlyCollection<string>> _PropertyFunc = null!;
	private FilterDefinition<AnilistModel> _FilterDefinition = null!;

	public ImmutableArray<string> Options => Column.DataGrid.FilteredItems
		.SelectMany(x => _PropertyFunc(x))
		.Distinct()
		.OrderByDescending(x => SelectedItems.Contains(x))
		.ThenBy(x => x)
		.ToImmutableArray();
	public HashSet<string> SelectedItems { get; private set; } = null!;
	[Parameter]
	public Column<AnilistModel> Column { get; set; } = null!;
	[Parameter]
	public Expression<Func<AnilistModel, IReadOnlyCollection<string>>> Property { get; set; } = null!;

	protected override void OnInitialized()
	{
		_PropertyFunc = Property.Compile();

		var property = GetPropertyName();
		var filterDefinition = Column.DataGrid.FilterDefinitions.SingleOrDefault(x => x.Title == property);
		if (filterDefinition is null)
		{
			filterDefinition = new()
			{
				Column = this.Column,
				Id = Guid.NewGuid(),
				Title = property,
				Value = new HashSet<string>(),
			};

			Column.DataGrid.AddFilter(filterDefinition);
		}

		SelectedItems = (HashSet<string>)filterDefinition.Value;
		filterDefinition.FilterFunction = m => SelectedItems.All(i => _PropertyFunc(m).Contains(i));
		_FilterDefinition = filterDefinition;
	}

	private string GetPropertyName()
	{
		var expression = (MemberExpression)Property.Body;
		return expression.Member.Name;
	}

	private void MarkFilterAsEnabled()
	{
		_FilterDefinition.Operator = "ignored";
	}

	private void MarkFilterAsDisabled()
	{
		_FilterDefinition.Operator = null;
	}

	public void OnCheckedChanged(bool value, string item)
	{
		if (value)
		{
			SelectedItems.Add(item);
			MarkFilterAsEnabled();
		}
		else
		{
			SelectedItems.Remove(item);
			if (SelectedItems.Count == 0)
			{
				MarkFilterAsDisabled();
			}
		}

		// StateHasChanged needs to be invoked
		// This method does the least while still doing that
		Column.DataGrid.ToggleFiltersMenu();
	}

	public void Clear()
	{
		SelectedItems.Clear();
		MarkFilterAsDisabled();
	}
}